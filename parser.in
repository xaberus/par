tokens {
  MACRODEF(5000) {
    local write = ...
    write([[( macrodef )]])
  };
  MACRO(5001) {
    local write = ...
    write([[( P(false) )]])
  };


  LINE_COMMENT(1000) {
    local write = ...
    write([[( P"//" * ( P(1) - nl )^0  )]])
  };

  MULTI_LINE_COMMENT(1001) {
    local write = ...
    write([[( P"/*" * ( ((P(1) - P"*/") - nl) + nl)^0 * "*/" ) ]])
  };


  FLOAT_CONSTANT(2000) {
    local write = ...
    write([[ ((
      R"09"^1 * S'eE' * S'+-'^-1 * R"09"^1 * (S'fFlL')^-1
      + R"09"^0 * P"." * R"09"^1 * (S'eE' * S'+-'^-1 * R"09"^1)^-1 * (S'fFlL')^-1
      + R"09"^1 * P"." * R"09"^0 * (S'eE' * S'+-'^-1 * R"09"^1)^-1 * (S'fFlL')^-1)) ]])
  };

  HEX_INT_CONSTANT(2001) {
    local write = ...
    write([[( P"0" * S"xX" * (R"09" + R"af" + R"AF")^1 * (S'uUlL'^0)^-1 )]])
  };

  OCT_INT_CONSTANT(2002) {
    local write = ...
    write([[( P"0" * (R"07")^1  * (S'uUlL'^0)^-1 )]])
  };

  DEC_INT_CONSTANT(2003) {
    local write = ...
    write([[( P"0" + (R"19" * R"09"^0)  * (S'uUlL'^0)^-1 )]])
  };

  CHAR_CONSTANT(2004) {
    local write = ...
    write([[  (P'L'^-1 * P"'" * (P'\\' * P(1) + (1 - S"\\'"))^1 * P"'")  ]])
  };

  STRING_CONSTANT(2005) {
    local write = ...
    write([[
      Ct((
        (C(P'L'^-1 * P'"' * (P'\\' * P(1) + (1 - S'\\"'))^0 * P'"')
          / function(str) return str:sub(2,#str-1) end)  * ws^0)^1) /
        function(tab) return '"' .. table.concat(tab, "") .. '"' end
    ]])
  };

  AUTO(nil, K"auto");
  BOOL(nil, K"bool");
  CHAR(nil, K"char");
  COMPLEX(nil, K"complex");
  DOUBLE(nil, K"double");
  FLOAT(nil, K"float");
  IMAGINARY(nil, K"imaginary");
  INT8(nil, K"int8");
  INT16(nil, K"int16");
  INT32(nil, K"int32");
  INT64(nil, K"int64");
  LONG(nil, K"long");
  SHORT(nil, K"short");
  SIGNED(nil, K"signed");
  UINT8(nil, K"uint8");
  UINT16(nil, K"uint16");
  UINT32(nil, K"uint32");
  UINT64(nil, K"uint64");
  UNSIGNED(nil, K"unsigned");
  VOID(nil, K"void");

  NAMESPACE(nil, K"namespace");
  DECLARE(nil, K"declare");
  INHERIT(nil, K"inherit");
  INTERFACE(nil, K"interface");

  /* must be here */
  INT(nil, K"int");

  IDENTIFIER(100) {
    local write = ...
    write([[( iden )]])
  };
  TYPE_NAME(200) {
    local write = ...
    write([[P(false)]])
  };

  BREAK(nil, K"break");
  CASE(nil, K"case");
  CONTINUE(nil, K"continue");
  DEFAULT(nil, K"default");
  DO(nil, K"do");
  ELSE(nil, K"else");
  ENUM(nil, K"enum");
  FOR(nil, K"for");
  GOTO(nil, K"goto");
  IF(nil, K"if");
  RETURN(nil, K"return");
  SIZEOF(nil, K"sizeof");
  STRUCT(nil, K"struct");
  SWITCH(nil, K"switch");
  TYPEDEF(nil, K"typedef");
  UNION(nil, K"union");
  WHILE(nil, K"while");

  CONST(nil, K"const");
  EXPORT(nil, K"export");
  EXTERN(nil, K"extern");
  HIDDEN(nil, K"hidden");
  INLINE(nil, K"inline");
  REGISTER(nil, K"register");
  RESTRICT(nil, K"restrict");
  STATIC(nil, K"static");
  VOLATILE(nil, K"volatile");

  ELLIPSIS(nil, "...");

  AND_OP(nil, "&&");
  DEC_OP(nil, "--");
  EQ_OP(nil, "==");
  GE_OP(nil, ">=");
  INC_OP(nil, "++");
  LEFT_OP(nil, "<<");
  LE_OP(nil, "<=");
  NE_OP(nil, "!=");
  OR_OP(nil, "||");
  PTR_OP(nil, "->");
  RIGHT_OP(nil, ">>");

  ADD_ASSIGN(nil, "+=");
  AND_ASSIGN(nil, "&=");
  DIV_ASSIGN(nil, "/=");
  LEFT_ASSIGN(nil, "<<=");
  MOD_ASSIGN(nil, "%=");
  MUL_ASSIGN(nil, "*=");
  OR_ASSIGN(nil, "|=");
  RIGHT_ASSIGN(nil, ">>=");
  SUB_ASSIGN(nil, "-=");
  XOR_ASSIGN(nil, "^=");

  ASSIGN(nil, "=");

  AMPERSAND(nil, "&");
  CIRCUMFLEX(nil, "^");
  DOT(nil, ".");
  GREATER(nil, ">");
  LESS(nil, "<");
  MINUS(nil, "-");
  PERCENT(nil, "%");
  PIPE(nil, "|");
  PLUS(nil, "+");
  SLASH(nil, "/");
  STAR(nil, "*");
  TILDE(nil, "~");


  COLON(nil, ":");
  COMMA(nil, ",");
  EXCLAMATION(nil, "!");
  QUESTION(nil, "?");
  SEMICOLON(nil, ";");

  L_BRACE(nil, "{");
  R_BRACE(nil, "}");
  L_BRACKET(nil, "[");
  R_BRACKET(nil, "]");
  L_PAREN(nil, "(");
  R_PAREN(nil, ")");

 /* ERROR(nil, error);*/
  END(0, eof);
}

primary_expression
  : IDENTIFIER {
      return env.parser.AST.Expression(env.tc, {k = "id", iden = $1, _m = m})
    }
  | constant {
      return env.parser.AST.Expression(env.tc, {k = "c", const = $1, _m = m})
    }
  | L_PAREN expression R_PAREN {
      return env.parser.AST.Expression(env.tc, {k = "par", par = $2, _m = m})
    }
  | L_PAREN compound_statement R_PAREN {
      return env.parser.AST.Expression(env.tc, {k = "comp", compound = $2, _m = m})
    }
  ;

constant
  : STRING_CONSTANT {
      return {string = $1, _m = m}
    }
  | CHAR_CONSTANT{
      return {char = $1, _m = m}
    }
  | OCT_INT_CONSTANT{
      return {oct = $1, _m = m}
    }
  | DEC_INT_CONSTANT{
      return {dec = $1, _m = m}
    }
  | HEX_INT_CONSTANT{
      return {hex = $1, _m = m}
    }
  | FLOAT_CONSTANT{
      return {float = $1, _m = m}
    }
  ;

postfix_expression
  : primary_expression {
      return $1
    }
  | postfix_expression L_BRACKET expression R_BRACKET {
      return env.parser.AST.Expression(env.tc, {k = "idx", index = $1, expr = $3, _m = m})
    }
  | postfix_expression L_PAREN R_PAREN {
      local args = env.parser.AST.Expression(env.tc, {k = "l", list = {}, _m = m})
      return env.parser.AST.Expression(env.tc, {k = "call", call = $1, args = args, _m = m})
    }
  | postfix_expression L_PAREN argument_expression_list R_PAREN {
      local args = env.parser.AST.Expression(env.tc, {k = "l", list=$3, _m = m})
      return env.parser.AST.Expression(env.tc, {k = "call", call = $1, args = args, _m = m})
    }
  | postfix_expression DOT IDENTIFIER {
      return env.parser.AST.Expression(env.tc, {k = "d", dot = $1, iden = $3, _m = m})
    }
  /*| postfix_expression PTR_OP IDENTIFIER*/
  | postfix_expression INC_OP {
      return env.parser.AST.Expression(env.tc, {k = "op_inc", inc = $1, _m = m})
    }
  | postfix_expression DEC_OP {
      return env.parser.AST.Expression(env.tc, {k = "op_dec", dec = $1, _m = m})
    }
  | L_PAREN type_name R_PAREN L_BRACE initializer_list R_BRACE {
      return env.parser.AST.Expression(env.tc, {k = "tc", tc = $2, list = $5, _m = m})
    }
  | L_PAREN type_name R_PAREN L_BRACE initializer_list COMMA R_BRACE {
      return env.parser.AST.Expression(env.tc, {k = "tc", tc = $2, list = $5, _m = m})
    }
  ;

argument_expression_list
  : assignment_expression {
      return {$1, _m = m}
    }
  | argument_expression_list COMMA assignment_expression {
      $1[#$1+1] = $3
      return $1
    }
  ;

unary_expression
  : postfix_expression {
      return $1
    }
  | INC_OP unary_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_uinc", uinc = $2, _m = m})
    }
  | DEC_OP unary_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_udec", udec = $2, _m = m})
    }
  | AMPERSAND cast_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_addr", addr = $2, _m = m})
    }
  | STAR cast_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_deref", deref = $2, _m = m})
    }
  | PLUS cast_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_unp", unp = $2, _m = m})
    }
  | MINUS cast_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_unm", unm = $2, _m = m})
    }
  | TILDE cast_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_bnot", bnot = $2, _m = m})
    }
  | EXCLAMATION cast_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_lnot", lnot = $2, _m = m})
    }
  | SIZEOF unary_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_sizeof", sizeof = $2, _m = m})
    }
  | SIZEOF L_PAREN type_name R_PAREN {
      return env.parser.AST.Expression(env.tc, {k = "op_fsizeof", fsizeof = $3, _m = m})
    }
  ;

cast_expression
  : unary_expression {
      return $1
    }
  | L_PAREN type_name R_PAREN cast_expression {
      return env.parser.AST.Expression(env.tc, {k = "cast", cast = $4, ctype = $2, _m = m})
    }
  ;


multiplicative_expression
  : cast_expression {
      return $1
    }
  | multiplicative_expression STAR cast_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_mul", mul = $1, expr = $3, _m = m})
    }
  | multiplicative_expression SLASH cast_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_div", div = $1, expr = $3, _m = m})
    }
  | multiplicative_expression PERCENT cast_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_mod", mod = $1, expr = $3, _m = m})
    }
  ;

additive_expression
  : multiplicative_expression {
      return $1
    }
  | additive_expression PLUS multiplicative_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_add", add = $1, expr = $3, _m = m})
    }
  | additive_expression MINUS multiplicative_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_sub", sub = $1, expr = $3, _m = m})
    }
  ;

shift_expression
  : additive_expression {
      return $1
    }
  | shift_expression LEFT_OP additive_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_shl", shl = $1, expr = $3, _m = m})
    }
  | shift_expression RIGHT_OP additive_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_shr", shr = $1, expr = $3, _m = m})
    }
  ;

relational_expression
  : shift_expression {
      return $1
    }
  | relational_expression LESS shift_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_ls", ls = $1, expr = $3, _m = m})
    }
  | relational_expression GREATER shift_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_gt", gt = $1, expr = $3, _m = m})
    }
  | relational_expression LE_OP shift_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_le", le = $1, expr = $3, _m = m})
    }
  | relational_expression GE_OP shift_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_ge", ge = $1, expr = $3, _m = m})
    }
  ;

equality_expression
  : relational_expression {
      return $1
    }
  | equality_expression EQ_OP relational_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_eq", eq = $1, expr = $3, _m = m})
    }
  | equality_expression NE_OP relational_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_ne", ne = $1, expr = $3, _m = m})
    }
  ;

and_expression
  : equality_expression {
      return $1
    }
  | and_expression AMPERSAND equality_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_band", band = $1, expr = $3, _m = m})
    }
  ;

exclusive_or_expression
  : and_expression {
      return $1
    }
  | exclusive_or_expression CIRCUMFLEX and_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_bxor", bxor = $1, expr = $3, _m = m})
    }
  ;

inclusive_or_expression
  : exclusive_or_expression {
      return $1
    }
  | inclusive_or_expression PIPE exclusive_or_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_bor", bor = $1, expr = $3, _m = m})
    }
  ;

logical_and_expression
  : inclusive_or_expression {
      return $1
    }
  | logical_and_expression AND_OP inclusive_or_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_land", land = $1, expr = $3, _m = m})
    }
  ;

logical_or_expression
  : logical_and_expression {
      return $1
    }
  | logical_or_expression OR_OP logical_and_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_lor", lor = $1, expr = $3, _m = m})
    }
  ;

conditional_expression
  : logical_or_expression {
      return $1
    }
  | logical_or_expression QUESTION expression COLON conditional_expression {
      return env.parser.AST.Expression(env.tc, {k = "cond", cond = $1, texpr = $3, fexpr = $5, _m = m})
    }
  ;

assignment_expression
  : conditional_expression {
      return $1
    }
  | unary_expression ASSIGN assignment_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_asgn", asgn = $1, expr = $3, _m = m})
    }
  | unary_expression MUL_ASSIGN assignment_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_mulasgn", mul_asgn = $1, expr = $3, _m = m})
    }
  | unary_expression DIV_ASSIGN assignment_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_divasgn", div_asgn = $1, expr = $3, _m = m})
    }
  | unary_expression MOD_ASSIGN assignment_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_modasgn", mod_asgn = $1, expr = $3, _m = m})
    }
  | unary_expression ADD_ASSIGN assignment_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_addasgn", add_asgn = $1, expr = $3, _m = m})
    }
  | unary_expression SUB_ASSIGN assignment_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_subasgn", sub_asgn = $1, expr = $3, _m = m})
    }
  | unary_expression LEFT_ASSIGN assignment_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_shlasgn", shl_asgn = $1, expr = $3, _m = m})
    }
  | unary_expression RIGHT_ASSIGN assignment_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_shrasgn", shr_asgn = $1, expr = $3, _m = m})
    }
  | unary_expression AND_ASSIGN assignment_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_bandasgn", band_asgn = $1, expr = $3, _m = m})
    }
  | unary_expression XOR_ASSIGN assignment_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_bxorasgn", bxor_asgn = $1, expr = $3, _m = m})
    }
  | unary_expression OR_ASSIGN assignment_expression {
      return env.parser.AST.Expression(env.tc, {k = "op_borasgn", bor_asgn = $1, expr = $3, _m = m})
    }
  ;

expression
  : assignment_expression {
      return env.parser.AST.Expression(env.tc, {k = "l", list = {$1}, _m = m})
    }
  | expression COMMA assignment_expression {
      $1.list[#$1.list+1] = $3
      return $1
    }
  ;

constant_expression
  : conditional_expression {
      return $1
    }
  ;

/**************************************************************************/
/***   ***   ***   ***   ***   ***   ***   ***  ***   ***   ***   ***   ***/
/***   ***   ***   ***   ***   ***   ***   ***  ***   ***   ***   ***   ***/
/***   ***   ***   ***   ***   ***   ***   ***  ***   ***   ***   ***   ***/
/**************************************************************************/

declaration
  : type_name init_declarator_list SEMICOLON {
      return env.parser.AST.Declaration(env.tc, {pure = true, decl = $2, ctype = $1, _m = m})
    }
  | TYPEDEF type_name IDENTIFIER SEMICOLON {
      local tdef = env.parser.AST.Declaration(env.tc, {tdef = true, tdef = $3, ctype = $2, _m = m})
      return tdef
    }
  | storage_class_specifier type_name init_declarator_list SEMICOLON {
      return env.parser.AST.Declaration(env.tc, {decl = $3, ctype = $2, spec = $1, _m = m})
    }
  | struct_or_union_definition SEMICOLON {
      return env.parser.AST.Declaration(env.tc, $1)
    }
  | enum_definition SEMICOLON {
      return env.parser.AST.Declaration(env.tc, $1)
    }
  ;

struct_or_union_definition
  : struct_or_union IDENTIFIER {
      local fwd = env.parser.AST.Struct(env.tc, nil, $2.value)
      env.tc.loc[fwd] = m
    } L_BRACE struct_declaration_list R_BRACE {
      return env.parser.AST.Struct(env.tc, {[$1.value] = true, iden = $2, decl = $5, _m = m}, $2.value)
    }
  ;

enum_definition_start
  : ENUM IDENTIFIER L_BRACE {
      env.enum = env.parser.AST.Enum(env.tc, {enum = $2.value, list = {}, _m = m})
      return env.enum
    } 
  ;

enum_definition_end
  : R_BRACE {
      env.enum = nil
      return true
    }
  ;
  
enum_definition
  : enum_definition_start enumerator_list enum_definition_end {
      return $1
    }
  | enum_definition_start enumerator_list COMMA enum_definition_end {
      return $1
    }
  ;


init_declarator_list
  : init_declarator {
      return {$1, _m = m}
    }
  | init_declarator_list COMMA init_declarator {
      $1[#$1+1] = $3
      return $1
    }
  ;

init_declarator
  : IDENTIFIER {
      return {iden = $1, _m = m}
    }
  | IDENTIFIER ASSIGN initializer {
      return {iden = $1, init = $3, _m = m}
    }
  ;

storage_class_specifier
  : EXTERN {
      return $1
    }
  | STATIC {
      return $1
    }
  | AUTO {
      return $1
    }
  | REGISTER {
      return $1
    }
  ;

type_specifier
  : VOID {
      return $1
    }
  | CHAR {
      return $1
    }
  | SHORT {
      return $1
    }
  | INT {
      return $1
    }
  | LONG {
      return $1
    }
  | FLOAT {
      return $1
    }
  | DOUBLE {
      return $1
    }
  | SIGNED {
      return $1
    }
  | UNSIGNED {
      return $1
    }
  | BOOL {
      return $1
    }
  | COMPLEX {
      return $1
    }
  | IMAGINARY {
      return $1
    }
  | struct_or_union_specifier {
      return  $1
    }
  | enum_specifier {
      return  $1
    }
  | TYPE_NAME {
      return  $1
    }
  | INT8 {
      return $1
    }
  | INT16 {
      return $1
    }
  | INT32 {
      return $1
    }
  | INT64 {
      return $1
    }
  | UINT8 {
      return $1
    }
  | UINT16 {
      return $1
    }
  | UINT32 {
      return $1
    }
  | UINT64 {
      return $1
    }
  ;

struct_or_union_specifier
  : struct_or_union IDENTIFIER {
      return env.parser.AST.Struct(env.tc, {[$1.value] = $2, _m = m})
    }
  | struct_or_union L_BRACE struct_declaration_list R_BRACE {
      return env.parser.AST.Struct(env.tc, {[$1.value] = true, decl = $3, _m = m})
    }
  ;

struct_or_union
  : STRUCT {
      return $1
    }
  | UNION {
      return $1
    }
  ;

struct_declaration_list
  : struct_declaration {
      return {$1, _m = m}
    }
  | struct_declaration_list struct_declaration {
      $1[#$1+1] = $2
      return $1
    }
  ;

struct_declaration
  : type_name struct_declarator_list SEMICOLON {
      return env.parser.AST.StructDeclaration(env.tc, {decl = $2, ctype = $1, _m = m})
    }
  | type_name SEMICOLON {
      return env.parser.AST.StructDeclaration(env.tc, {anon = true, ctype = $1, _m = m})
    }
  ;

specifier_qualifier_list
  : type_specifier specifier_qualifier_list {
      $2.spec[#$2.spec+1] = $1
      return $2
    }
  | type_specifier {
      return {spec = {$1}, qual = {}, _m = m}
    }
  | type_qualifier specifier_qualifier_list {
      $2.qual[#$2.qual+1] = $1
      return $2
    }
  | type_qualifier {
      return {spec = {}, qual = {$1}, _m = m}
    }
  ;

struct_declarator_list
  : struct_declarator {
      return {$1, _m = m}
    }
  | struct_declarator_list COMMA struct_declarator {
      $1[#$1+1] = $3
      return $1
    }
  ;

struct_declarator
  : IDENTIFIER {
      return {iden = $1, _m = m}
    }
  | IDENTIFIER COLON constant_expression {
      return {iden = $1, width = $3, _m = m}
    }
  ;

enum_specifier_start
  : ENUM L_BRACE {
      env.enum = env.parser.AST.Enum(env.tc, {enum = "", list = {}, _m = m})
      return env.enum
    }
  ;
enum_specifier_end
  : R_BRACE {
      env.enum = nil
      return true
    }
  ;
  
enum_specifier
  : enum_specifier_start enumerator_list enum_specifier_end {
      return $1
    }
  | enum_specifier_start enumerator_list COMMA enum_specifier_end {
      return $1
    }
  | ENUM IDENTIFIER {
      return env.parser.AST.Enum(env.tc, {enum = $2, _m = m})
    }
  ;

enumerator_list
  : enumerator {
      return true
    }
  | enumerator_list COMMA enumerator {
      return true
    }
  ;

enumerator
  : IDENTIFIER {
      local enum = env.enum
      local enr = env.parser.AST.Enumerator(env.tc, enum, {iden = $1, _m = m})
      enum[#enum+1] = enr
      return enr
    }
  | IDENTIFIER ASSIGN constant_expression {
      local enum = env.enum
      local enr = env.parser.AST.Enumerator(env.tc, enum, {iden = $1, value = $3, _m = m})
      enum[#enum+1] = enr
      return enr
    }
  ;

type_qualifier
  : CONST {
      return $1
    }
  | RESTRICT {
      return $1
    }
  | VOLATILE {
      return $1
    }
  ;

pointer
  : STAR {
      return {{_m = m}}
    }
  | STAR type_qualifier_list {
      return {{qual = $2}, _m = m}
    }
  | STAR pointer {
      return merge({{_m = m}}, $2)
    }
  | STAR type_qualifier_list pointer {
      return merge({{qual = $2, _m = m}}, $3)
    }
  ;

array
  : L_BRACKET type_qualifier_list assignment_expression R_BRACKET {
      return {{qual = $2, expr = $3, _m = m}}
    }
  | L_BRACKET type_qualifier_list R_BRACKET {
      return {{qual = $2, _m = m}}
    }
  | L_BRACKET assignment_expression R_BRACKET {
      return {{expr = $2, _m = m}}
    }
  | L_BRACKET STATIC type_qualifier_list assignment_expression R_BRACKET {
      return {{static = true, qual = $3, expr = $4, _m = m}}
    }
  | L_BRACKET type_qualifier_list STATIC assignment_expression R_BRACKET {
      return {{static = true, qual = $3, expr = $5, _m = m}}
    }
  | L_BRACKET R_BRACKET {
      return {{_m = m}}
    }
  | array L_BRACKET type_qualifier_list assignment_expression R_BRACKET {
      $1[#$1+1] = {qual = $3, expr = $4}
      return $1
    }
  | array L_BRACKET type_qualifier_list R_BRACKET {
      $1[#$1+1] = {qual = $3}
      return $1
    }
  | array L_BRACKET assignment_expression R_BRACKET {
      $1[#$1+1] = {expr = $3}
      return $1
    }
  | array L_BRACKET STATIC type_qualifier_list assignment_expression R_BRACKET {
      $1[#$1+1] = {static = true, qual = $4, expr = $5}
      return $1
    }
  | array L_BRACKET type_qualifier_list STATIC assignment_expression R_BRACKET {
      $1[#$1+1] = {static = true, qual = $4, expr = $6}
      return $1
    }
  | array L_BRACKET R_BRACKET {
      $1[#$1+1] = {}
      return $1
    }
  ;

function_type
  : type_name COLON {
      return {funcatype = true, ret = $1, list = {}, _m = m}
    }
  | type_name COLON type_name_list {
      return {funcatype = true, ret = $1, list = $3, _m = m}
    }
  ;

type_name_list
  : type_name {
      return {$1, _m = m}
    }
  | type_name_list COMMA type_name {
      $1[#$1+1] = $3
      return $1
    }
  ;

type_qualifier_list
  : type_qualifier {
      return {$1, _m = m}
    }
  | type_qualifier_list type_qualifier {
      $1[#$1+1] = $2
      return $1
    }
  ;


parameter_type_list
  : parameter_list {
      return $1
    }
  | parameter_list COMMA ELLIPSIS {
      $1.vararg = true
      return $1
    }
  ;

parameter_list
  : parameter_declaration {
      return {$1, _m = m}
    }
  | parameter_list COMMA parameter_declaration {
      $1[#$1+1] = $3
      return $1
    }

  ;

parameter_declaration
  : type_name IDENTIFIER {
      return env.parser.AST.Parameter(env.tc, {param = $2.value, ctype = $1, _m = m})
    }
  ;

type_name
  : specifier_qualifier_list {
      return env.parser.AST.Type(env.tc, {sqlist = $1, _m = m})
    }
  | specifier_qualifier_list abstract_declarator {
      return env.parser.AST.Type(env.tc, {sqlist = $1, adecl = $2, _m = m})
    }
  | L_BRACKET function_type R_BRACKET abstract_declarator {
      return env.parser.AST.Type(env.tc, {functype = $2, adecl = $4, _m = m})
    }
  | L_BRACKET type_name_list R_BRACKET {
      return env.parser.AST.Type(env.tc, {tuple = $2, _m = m})
    }
  | L_BRACKET type_name_list R_BRACKET abstract_declarator {
      return env.parser.AST.Type(env.tc, {tuple = $2, adecl = $4, _m = m})
    }
  ;

abstract_declarator
  : pointer {
      return {pointer = $1, _m = m}
    }
  | pointer array {
      return {pointer = $1, array = $2, _m = m}
    }
  | array {
      return {array = $1, _m = m}
    }
  ;

initializer
  : assignment_expression {
      return env.parser.AST.Initializer(env.tc, {asgnexpr = $1, _m = m})
    }
  | L_BRACE initializer_list R_BRACE {
      return env.parser.AST.Initializer(env.tc, {initlist = $2, _m = m})
    }
  | L_BRACE initializer_list COMMA R_BRACE {
      return env.parser.AST.Initializer(env.tc, {initlist = $2, _m = m})
    }
  ;

initializer_list
  : initializer {
      return {$1, _m = m}
    }
  | designation initializer {
      $2.desgn = $1
      return {$2, _m = m}
    }
  | initializer_list COMMA initializer {
      $1[#$1+1] = $3
      return $1
    }
  | initializer_list COMMA designation initializer {
      $4.desgn = $3
      $1[#$1+1] = $4
      return $1
    }
  ;

designation
  : designator_list ASSIGN {
      return env.parser.AST.Designation(env.tc, $1)
    }
  ;

designator_list
  : designator {
      return {$1, _m = m}
    }
  | designator_list designator {
      $1[#$1+1] = $2
      return $1
    }
  ;

designator
  : L_BRACKET constant_expression R_BRACKET {
      return {index = $2, _m = m}
    }
  | DOT IDENTIFIER {
      return {iden = $2, _m = m}
    }
  ;

statement
  : closed_statement {
      return $1
    }
  | opened_statement {
      return $1
    }
  ;

if_clause
  : IF L_PAREN expression R_PAREN {
      return {k = "if", ifcl = $3, _m = m}
    }
  ;

do_clause
  : DO {
      env.tc = env.tc:child("loop", m)
      return {k = "do", docl = true, _m = m}
    }
  ;

for_clause_start
  : FOR L_PAREN {
      env.tc = env.tc:child("loop", m)
      return true
    }
  ;

for_clause_end
  : R_PAREN {
      return true
    }
  ;
  
for_clause
  : for_clause_start expression_statement expression_statement for_clause_end {
      return {k = "for", forcl = "ee", init = $2.expr, cond = $3.expr, _m = m}
    }
  | for_clause_start expression_statement expression_statement expression for_clause_end {
      return {k = "for", forcl = "eee", init = $2.expr, cond = $3.expr, incr=$4, _m = m}
    }
  | for_clause_start declaration expression_statement for_clause_end {
      return {k = "for", forcl = "de", decl = $2, cond = $3.expr, _m = m}
    }
  | for_clause_start declaration expression_statement expression for_clause_end {
      return {k = "for", forcl = "dee", decl = $2, cond = $3.expr, incr=$4, _m = m}
    }
  ;

while_clause
  : WHILE L_PAREN expression R_PAREN {
      env.tc = env.tc:child("loop", m)
      return {k = "while", whilecl = $3, _m = m}
    }
  ;

label
  : IDENTIFIER COLON {
      return {k = "label", label = $1, _m = m}
    }
  | CASE constant_expression COLON {
      return {k = "case", case = $2, _m = m}
    }
  | DEFAULT COLON {
      return {k = "default", default = true, _m = m}
    }
  ;

switch_clause
  : SWITCH L_PAREN expression R_PAREN {
      env.tc = env.tc:child("switch", m)
      return {k = "switch", switchcl = $3, _m = m}
    }
  ;


opened_statement
  : if_clause statement {
      $1.dstmt = $2
      $1.opened = true
      return env.parser.AST.Statement(env.tc, $1)
    }
  | if_clause closed_statement ELSE opened_statement{
      $1.dstmt = $2
      $1.estmt = $4
      $1.opened = true
      return env.parser.AST.Statement(env.tc, $1)
    }
  | do_clause opened_statement while_clause SEMICOLON {
      $1.dstmt = $2
      $1.docl = $3.whilecl
      $1.opened = true
      return env.parser.AST.Statement(env.tc, $1)
    }
  | for_clause opened_statement {
      $1.dstmt = $2
      $1.opened = true
      env.tc = env.tc.parent
      local stmt = env.parser.AST.Statement(env.tc, $1)
      return stmt
    }
  | while_clause opened_statement {
      $1.dstmt = $2
      $1.opened = true
      env.tc = env.tc.parent
      local stmt = env.parser.AST.Statement(env.tc, $1)
      return stmt
    }
  ;

closed_statement
  : if_clause closed_statement ELSE closed_statement {
      $1.dstmt = $2
      $1.estmt = $4
      $1.opened = false
      local stmt = env.parser.AST.Statement(env.tc, $1)
      return stmt
    }
  | do_clause closed_statement while_clause SEMICOLON {
      $1.docl = $3.whilecl
      $1.dstmt = $2
      $1.opened = false
      local stmt = env.parser.AST.Statement(env.tc, $1)
      env.tc = env.tc.parent
      return stmt
    }
  | for_clause closed_statement {
      $1.dstmt = $2
      $1.opened = false
      local stmt = env.parser.AST.Statement(env.tc, $1)
      env.tc = env.tc.parent
      return stmt
    }
  | while_clause closed_statement {
      $1.dstmt = $2
      $1.opened = false
      local stmt = env.parser.AST.Statement(env.tc, $1)
      env.tc = env.tc.parent
      return stmt
    }
  | expression_statement {
      return env.parser.AST.Statement(env.tc, $1)
    }
  | jump_statement {
      return env.parser.AST.Statement(env.tc, $1)
    }
  | label {
      return env.parser.AST.Statement(env.tc, $1)
    }
  | switch_clause compound_statement {
      $1.dstmt = {compound = $2}
      $1.opened = false
      local stmt = env.parser.AST.Statement(env.tc, $1)
      env.tc = env.tc.parent
      return stmt
    }
  | compound_statement {
      return env.parser.AST.Statement(env.tc, {k = "{}", compound = $1, _m = m})
    }
  ;

compound_statement
  : L_BRACE R_BRACE {
      return env.parser.AST.Block(env.tc, {_m = m})
    }
  | L_BRACE { env.tc = env.tc:child("block", m) } block_item_list R_BRACE {
      local blk = env.parser.AST.Block(env.tc, $3)
      env.tc = env.tc.parent
      return blk
    }
  ;


block_item_list
  : block_item {
      return {$1, _m = m}
    }
  | block_item_list block_item {
      $1[#$1+1] = $2
      return $1
    }
  ;

block_item
  : declaration {
      return {decl = $1, _m = m}
    }
  | statement {
      return {stmt = $1, _m = m}
    }
  ;

expression_statement
  : SEMICOLON {
      return {k = "@", empty = true, _m = m}
    }
  | expression SEMICOLON {
      return {k = "expr", expr = $1, _m = m}
    }
  ;


jump_statement
  : GOTO IDENTIFIER SEMICOLON {
      return {k = "goto", gotostmt = $2, _m = m}
    }
  | CONTINUE SEMICOLON {
      return {k = "continue", contstmt = $1, _m = m}
    }
  | BREAK SEMICOLON {
      return {k = "break", breakstmt = $1, _m = m}
    }
  | RETURN SEMICOLON {
      return {k = "return", retstmt = true, _m = m}
    }
  | RETURN expression SEMICOLON {
      return {k = "return", retstmt = $2, _m = m}
    }
  ;

source
  : translation_unit
    {
      return env.parser.AST.Source(env.tc, $1)
    }
  ;

translation_unit
  : external_declaration {
      return {$1, _m = m}
    }
  | translation_unit external_declaration {
      $1[#$1+1] = $2
      return $1
    }
  | MACRODEF
  ;

external_declaration
  : function_definition {
      return $1
    }
  | declaration {
      return $1
    }
  | interface_definition {
      return $1
    }
  | namespace {
      return $1
    }
  ;

namespace
  : NAMESPACE IDENTIFIER {
      env.tc = env.tc:ns_reg($2.value)
    } L_BRACE translation_unit R_BRACE SEMICOLON {
      local src = env.parser.AST.Source(env.tc, $5)
      local ns = env.parser.AST.Namespace(env.tc, {ns = $2, src = src, _m = m})
      env.tc = env.tc.parent
      return ns
    }
  ;


interface_definition
  : INTERFACE IDENTIFIER L_BRACE {
      local id = $2.value
      local iface = {iface = $2, _m = m}
      local fwd = env.parser.AST.Interface(env.tc, iface, id)
      env.tc.loc[fwd] = m
      env.tc:iface_reg(id, fwd)
      fwd.cid = env.tc:ns_get_iface(id)
      env.tc = env.tc:child("iface", m) 
      local itype = env.parser.AST.Type(env.tc, iface)
      fwd.ctype = itype
      fwd.env = env.tc
      env.tc.id = id
      env.tc:type_reg("selftype", itype)
      env.iself = itype
      return fwd
    } 
    interface_declaration {
      local struct = env.parser.AST.Struct(env.tc, {struct = true, decl = $5, _m = m})
      $4:set_struct(env.tc, struct, $2)
    } interface_definition_block R_BRACE SEMICOLON {
      $4:set_defs(env.tc, $7)
      env.tc = env.tc.parent
      env.iself = nil
      return $4
    }
  ;

interface_derrivation
  : INHERIT INTERFACE IDENTIFIER SEMICOLON {
      --local iface = tassert(m, env.tc:iface_get_r($3.value), "no interface '%s' in this scope", $3.value)
      local iface = assert(env.tc:iface_get_r($3.value), $3.value)
      local sd = env.parser.AST.StructDeclaration(env.tc, {anon = true, struct = iface.struct, _m = m})
      return sd
    }
  ;

interface_struct_declaration_list
  : struct_declaration {
      return {$1, _m = m}
    }
  | interface_derrivation {
      return {$1, _m = m}
    }
  | interface_struct_declaration_list struct_declaration {
      $1[#$1+1] = $2
      return $1
    }
  ;


interface_declaration
  : DECLARE L_BRACE interface_struct_declaration_list R_BRACE SEMICOLON {
      return $3
    }
  ;


interface_definition_block
  : method_definition_list {
      return $1
    }
  ;

method_definition_list
  : function_definition {
      return {$1, _m = m}
    }
  | method_definition_list function_definition {
      $1[#$1+1] = $2
      return $1
    }
  ;

function_specifier_list
  : function_specifier {
      return {$1, _m = m}
    }
  | function_specifier_list function_specifier {
      $1[#$1+1] = $2
      return $1
    }
  ;

function_specifier
  : INLINE {
      return $1
    }
  | EXPORT {
      return $1
    }
  | HIDDEN {
      return $1
    }
  ;

function_definition_head
  : type_name IDENTIFIER L_PAREN {
      env.tc = env.tc:child("param", m)
      env.tc.id = $2.value
      return {funcdef = $2, rctype = $1, list = {}, _m = m}
    }
  | function_specifier_list type_name IDENTIFIER L_PAREN
    {
      env.tc = env.tc:child("param", m)
      env.id = $3.value
      return {spec = $1, funcdef = $3, rctype = $2, list = {}, _m = m}
    }
  ;

function_definition_tail
  : R_PAREN {
      return {}
    }
  ;

function_definition
  : function_definition_head function_definition_tail SEMICOLON {
      $1.forward = true
      if env.iself then
        local iself = env.parser.AST.Parameter(env.tc, {param = "self", ctype = env.iself:to_pointer(), _m = m})
        $1.iself = iself
      end
      local func = env.parser.AST.Function(env.tc, $1)
      env.tc = env.tc.parent
      return func
    }
  | function_definition_head parameter_type_list function_definition_tail SEMICOLON {
      $1.forward = true
      $1.list = $2
      if env.iself then
        local iself = env.parser.AST.Parameter(env.tc, {param = "self", ctype = env.iself:to_pointer(), _m = m})
        $1.iself = iself
      end
      local func = env.parser.AST.Function(env.tc, $1, env.iself)
      env.tc = env.tc.parent
      return func
    }

  | function_definition_head function_definition_tail {
      if env.iself then
        local iself = env.parser.AST.Parameter(env.tc, {param = "self", ctype = env.iself:to_pointer(), _m = m})
        $1.iself = iself
      end
      local func = env.parser.AST.Function(env.tc, $1, env.iself)
      return func
    }
    compound_statement {
      $4:check_labels()
      $3.block = $4
      env.tc = env.tc.parent
      return $3
    }

  | function_definition_head parameter_type_list function_definition_tail {
      $1.list = $2
      if env.iself then
        local iself = env.parser.AST.Parameter(env.tc, {param = "self", ctype = env.iself:to_pointer(), _m = m})
        $1.iself = iself
      end
      local func = env.parser.AST.Function(env.tc, $1)
      return func
    } compound_statement {
      $5:check_labels()
      $4.block = $5
      env.tc = env.tc.parent
      return $4
    }
  ;
