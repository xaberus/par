#!/usr/bin/luajit

require "dump"

local Class = require "class"
local AST = require "handlers"
local CPR = require "cpr"

Parser = Class("Parser", {
  errf = function(err)
    print(debug.traceback())
    print(err)
  end,
  penv = assert(require "parser"),
  lex = assert(require "lexer"),
  parse = assert(require "libclex_parse"),
},
function(P, src)
  local env = AST.Environment()
  local self = setmetatable({
    src = io.input(src):read("*a"),
    running = true,
    pos = 1,
    rt = {line = 1},
    env = {
      global = env,
      current = env,
    },
    parse = parse,
  }, P)
  return self
end)

arg = {...}

if not arg[1] then
  io.stderr:write("no input files\n")
  os.exit(1)
end

local p, tree = Parser(arg[1] or "test.in"):parse()
io.stderr:write("CLEX done\n")

local ast

local stat, err = xpcall(
function()
  ast = AST.Source(p.env.current, tree)
  --print(ast:repr(""))
  io.stderr:write("STAGE 1: done\n")
end,
function(err)
  return {err, debug.traceback()}
end)

if not stat then
  local res, tbk = unpack(err)
  if type(res) == "table" then
    --dump(res)
    local tok, msg = unpack(res)
    msg = msg or "<N/I>"
    if tok and tok._ts then
      --dump(tok, true)
      local ls = tok._ts
      local le = tok._te
      while ls > 1 do
        if p.src:byte(ls) == 10 then
          break
        end
        ls = ls - 1
      end
      while le < #p.src do
        if p.src:byte(le) == 10 then
          break
        end
        le = le + 1
      end
      print(string.format("error:<infile>:%d: %s\n%s", tok._line, p.src:sub(ls+1, le-1), msg))
    else
      print("error: " .. msg)
    end
  else
    print("error: " .. res)
  end
  if true or not res then
    print(tbk)
  end
end

local out = setmetatable({}, {
  __index = {
    add = function(self, ...)
      self[#self+1] = table.concat({...}, "")
    end,
    pop = function(self, ...)
      table.remove(self)
    end,
    dmp = function(self)
      for k, v in ipairs(self) do
        print(string.format("[[%s]]", v))
      end
    end,
  }
})

if ast then
  local cpr = CPR.disown(ast)
  cpr:cpr(out, "")
  print(table.concat(out, ""))
  print("// " .. "vim: filetype=c:expandtab:shiftwidth=2:tabstop=4:softtabstop=2:textwidth=100")
  io.stderr:write("STAGE 2: done\n")
end

